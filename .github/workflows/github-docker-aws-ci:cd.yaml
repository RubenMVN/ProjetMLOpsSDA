name: Github-Docker Hub AWS ECS MLOps pipeline - Ruben

env:
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  REPO_NAME: ${{ secrets.REPO_NAME }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
  

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  ci_pipeline: 
    runs-on: ubuntu-latest  
    steps:
      - uses: actions/checkout@v2  

      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Format
        run: black app.py

      - name: Lint
        run: pylint --disable=R,C app.py

  cd_pipeline:
    runs-on: ubuntu-latest
    needs: [ci_pipeline]
    
    steps:
      - uses: actions/checkout@v2  

      - name: Docker login to Docker Hub
        run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d--%M-%S')"

      - name: Build and push Docker image to Docker Hub
        run: |
          docker build . --file Dockerfile --tag $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}
          docker push $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}

  aws_cd_pipeline:
    runs-on: ubuntu-latest
    needs: [cd_pipeline]
    
    steps:
      - uses: actions/checkout@v2  

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_DEFAULT_REGION

      - name: Docker login to AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d--%M-%S')"

      - name: Build and push Docker image to AWS ECR
        run: |
          IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REPO_NAME:${{ steps.date.outputs.date }}"
          docker build . --file Dockerfile --platform="linux/amd64" --tag $IMAGE_URI
          docker push $IMAGE_URI

  deploy_to_ecs:
    runs-on: ubuntu-latest
    needs: [aws_cd_pipeline]  

    steps:
      - uses: actions/checkout@v2  

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_DEFAULT_REGION

      - name: Debug new task definition
        run: cat new-task-definition.json

      - name: Get latest task definition
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition > task-definition.json
      
      - name: Extract relevant fields from task definition
        run: |
            jq ".taskDefinition | {family: .family, containerDefinitions: .containerDefinitions}" task-definition.json > task-definition-updated.json

      - name: Update task definition with new image
        run: |
            IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REPO_NAME:${{ steps.date.outputs.date }}"
    
            jq '{family: .taskDefinition.family, containerDefinitions: .taskDefinition.containerDefinitions}' task-definition.json > task-definition-updated.json

            jq --arg IMAGE "$IMAGE_URI" '.containerDefinitions[0].image=$IMAGE | {family, containerDefinitions}' task-definition-updated.json > new-task-definition.json
            
      - name: Register new task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://new-task-definition.json

      - name: Update ECS service to use new task definition
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $ECS_TASK_DEFINITION